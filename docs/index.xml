<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Cookbook</title>
    <link>https://codecookbook.co/</link>
    <description>Recent content on Code Cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Sep 2016 16:31:20 -0400</lastBuildDate>
    <atom:link href="https://codecookbook.co/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How React Native Dies</title>
      <link>https://codecookbook.co/text/how-react-native-dies/</link>
      <pubDate>Wed, 14 Sep 2016 16:31:20 -0400</pubDate>
      
      <guid>https://codecookbook.co/text/how-react-native-dies/</guid>
      <description>

&lt;h2 id=&#34;by-chef-matt-code-cookbook-http-codecookbook-co:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;by Chef Matt @ &lt;a href=&#34;http://codecookbook.co&#34;&gt;Code Cookbook&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;update-i-ve-had-a-conversation-with-brent-vatne-that-s-led-me-to-slightly-revise-the-position-i-articulate-here-pieces-of-that-conversation-are-included-at-the-end-of-this-article:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Update: I&amp;rsquo;ve had a conversation with Brent Vatne that&amp;rsquo;s led me to slightly revise the position I articulate here. Pieces of that conversation are included at the end of this article.&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Recruiter: &amp;ldquo;Why don&amp;rsquo;t you want to work at a company that uses Cordova?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Me: &amp;ldquo;Look at the top 100 apps in the app store. None of those apps use Cordova. I want to build the best possible apps I can, so I don&amp;rsquo;t use Cordova, nor am I interested in learning how to build Cordova applications.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the above (actual) conversation suggests, I&amp;rsquo;ve typically been skeptical of any kind of mobile development that doesn&amp;rsquo;t use the Android and iOS SDKs. I was skeptical of React Native too until I tried it. Now, I honestly believe that React Native &lt;em&gt;can&lt;/em&gt; be a viable contender to standard mobile application development. This is exciting. Writing nearly identical code for both platforms is a huge waste of time, so the &amp;ldquo;learn once. write everywhere&amp;rdquo; value proposition is pretty compelling.&lt;/p&gt;

&lt;p&gt;I really want react native to succeed, but there&amp;rsquo;s a lot of hype around react native right now, and this hype can blind us to potentially deadly problems that react native faces as a technology. &lt;a href=&#34;https://hbr.org/2007/09/performing-a-project-premortem&#34;&gt;Pre-mortems&lt;/a&gt; are thought experiments designed to help us look past a project&amp;rsquo;s hype and think carefully about what needs to change about a product so that it can be successful in the long run. This article is a pre-mortem on React Native. It&amp;rsquo;s an invitation to imagine how react native dies so that we can make sure that it lives in the long run. I don&amp;rsquo;t think anyone wants to to writing nearly identical code on both platforms, so we all have some work to do to make sure that React Native makes it.&lt;/p&gt;

&lt;h3 id=&#34;react-native-the-adoption-lifecycle-and-the-chasm:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;React Native, the Adoption Lifecycle, and &amp;ldquo;the Chasm&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://codecookbook.co/img/adoption-lifecycle.png&#34; alt=&#34;Adoption lifecycle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Technology_adoption_life_cycle&#34;&gt;The adoption lifecycle&lt;/a&gt;,&amp;rdquo; as the name implies, divides a product&amp;rsquo;s adopters into different categories based on when they&amp;rsquo;ll adopt a product. Right now, I&amp;rsquo;d say that react native is being adopted by some &amp;ldquo;early adopters&amp;rdquo; like &lt;a href=&#34;https://medium.com/@clayallsopp/react-native-in-production-2b3c6e6078ad#.bh69dkdlp&#34;&gt;Palantir&lt;/a&gt;, &lt;a href=&#34;https://developers.soundcloud.com/blog/react-native-at-soundcloud&#34;&gt;Sound Cloud&lt;/a&gt;, &lt;a href=&#34;http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy&#34;&gt;Artsy&lt;/a&gt;, and &lt;a href=&#34;https://chalkchisel.com/blog/ios-developer-react-native&#34;&gt;Chalk and Chisel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Crossing_the_Chasm&#34;&gt;Geoffrey Moore famously suggested&lt;/a&gt; that its &lt;em&gt;more difficult&lt;/em&gt; for a product to capture the &lt;em&gt;early majority&lt;/em&gt; than it is to capture &lt;em&gt;early adopters&lt;/em&gt;. Moreover, he claims that the many products and companies dies as a result of failing to &amp;ldquo;cross the chasm&amp;rdquo; between early adopters and the early majority.&lt;/p&gt;

&lt;p&gt;Interestingly, he claims via a &amp;ldquo;High-Tech Parable&amp;rdquo; that a product is often at the edge of the chasm just when hype about a new product is at its greatest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;the company wins over several more visionary early adopters, including a handful of truly major deals&amp;hellip;everyone is convinced it is time to ramp up&amp;hellip;[one year later]&amp;hellip;third quarter revenue results are in - and they&amp;rsquo;re absolutely dismal&amp;hellip;What the company staff interpreted as a ramp in sales leading smoothly &amp;ldquo;up the [adoption lifecycle] curve&amp;rdquo; was in fact an initial blip&amp;hellip;and not the first indications of an emerging mainstream market.&lt;/p&gt;

&lt;p&gt;Crossing the Chasm, 23-24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that react native is actually close to the edge of the chasm, so the path forward for React Native, if we want to take Geoffrey Moore&amp;rsquo;s model seriously, is to find a way to win over the early majority.&lt;/p&gt;

&lt;h3 id=&#34;helping-react-native-cross-the-chasm:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Helping React Native Cross the Chasm&lt;/h3&gt;

&lt;p&gt;Who exactly is the early majority? Well, they are companies whose developers are more skeptical versions of me. These companies are full of native mobile developers who have invested a ton of time and energy learning the iOS and Android SDKs. These developers have seen Cordova come and go and they&amp;rsquo;re skeptical that anything other than the iOS and Android SDKs can deliver a truly native &lt;em&gt;look and feel.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If this is true, then we can identify one thing that could kill react native: a user experience that doesn&amp;rsquo;t &lt;em&gt;look and feel&lt;/em&gt; like ordinary Android and iOS apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This may seem obvious. After all, the whole point of react native is to let us build apps that feel like native apps without duplicating code across platforms. But hear me out. I think that many &lt;em&gt;react native developers are failing at this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Although react native is capable of delivering a native look and feel, I think many react native developers fail to take &lt;em&gt;full&lt;/em&gt; advantage of this. Many react native applications that I look at still look like web applications. These applications don&amp;rsquo;t exhibit any real concern for following the &lt;em&gt;UI design guidelines for the various platforms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think that if react native dies, it&amp;rsquo;ll be because it doesn&amp;rsquo;t figure out how to make it easy for its community to build apps that fall in line with the Android and iOS UI and UX design specs. Maybe the folks at Facebook don&amp;rsquo;t even necessarily need to change anything about react native for this to happen. Maybe we, as developers, just need to decide to do better with this.&lt;/p&gt;

&lt;p&gt;As more native developers come on board, the job of convincing the others will be easier. This isn&amp;rsquo;t just because people like to hop on band wagons. As &lt;a href=&#34;http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;Eloy from Artsy&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=2Zthnq-hIXA&#34;&gt;James from Exponent&lt;/a&gt; have pointed out, native developers have insight on how to build better react native applications and when the skeptical native developers start seeing more quality react native apps, they&amp;rsquo;ll eventually be won over.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you agree, then the next time you start a react native app, checkout the &lt;a href=&#34;https://material.google.com/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/&#34;&gt;iOS&lt;/a&gt; design guidelines and tell you friends to do the same. If you think I&amp;rsquo;m wrong, then I&amp;rsquo;d love to hear what you think is the most threatening problem that react native faces on its way to mainstream adoption.&lt;/p&gt;

&lt;p&gt;Either way, let&amp;rsquo;s do what we can to make sure that we don&amp;rsquo;t have to go back to writing the same code on two different platforms.&lt;/p&gt;

&lt;p&gt;Code Cookbook creates recipes for building great react native apps. We have native mobile development experience, so we&amp;rsquo;ve got a little insight into how to build your react native apps so that they feel like native iOS and Android apps. You can check out our upcoming recipes on this topic &lt;a href=&#34;http://codecookbook.co/categories/rn-ux&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;appendix-talking-with-brent:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Appendix: Talking with Brent&lt;/h3&gt;

&lt;p&gt;Brent: I think your conclusion is half on target and half off fwiw. [At one point you say,]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although react native is capable of delivering a native look and feel, I think many react native developers fail to take full advantage of this. Many react native applications that I look at still look like web applications. These applications don’t exhibit any real concern for following the UI design guidelines for the various platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I definitely agree that many developers don’t take advantage of it but i’m not convinced that the most poorly built apps using a tool will lead to it not succeeding. [At another point you say,]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think that if react native dies, it’ll be because it doesn’t figure out how to make it easy for its community to take build apps to the Android and iOS design specs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, I’m not sure this matters because hardly anyone properly follows this on ios and Android anyways. The only apps i have on my phone with material design properly done are from google :P&lt;/p&gt;

&lt;p&gt;Matt: Haha. Good point. So what do you think is the most pressing problem RN faces?&lt;/p&gt;

&lt;p&gt;Brent: From my point of view, some equivalent of uicollectionview/uitableview and android listview are a big concern still…[and] contact lists are difficult with react native, but super easy with native. Of course people can always drop down to native and bridge some view, which is what people do. But the biggest problems faced by react native are: a) startup time - it should be just as fast to render a part of your app with react native as it would be without - and b) listviews, very complex gestures. I group these together because they’re big problems that are both related to react-native async architecture that is in many ways incredible but makes these things more difficult see this talk re: gestures.&lt;/p&gt;

&lt;p&gt;Brent: Imo it’s not important to follow some narrowly defined designed language like material design. The web works great on desktop without any well defined language, but there are common patterns that work and people use those and everyone is happy. Also, I think being completely adherent with a platform specific design language hurts code reuse. Apps like f8 and many other RN apps have different navigation layouts but the actual content views are usually shared.&lt;/p&gt;

&lt;p&gt;Matt: I think you’re probably right that its not important to follow a narrowly designed language like material design. I’m actually not really committed to the importance of following a design language. I think it would have been better if [in the above article] I said something like: RN lets us create native experiences that feel just as good as regular native apps. A lot of devs aren’t taking advantage of this and that hurts RN. The design guidelines are a good starting point for understanding the potential for your RN app. Does that seem more plausible to you?&lt;/p&gt;

&lt;p&gt;Brent: Imo the basic premise of the article is awesome – you should think about how something might fail and that can help to prevent it. I’m not convinced that developers doing a bad job with their apps is hurting RN, because there are plenty doing great apps. Moreover, when I talk about react native dying, its purely as a thought exercise as you mentioned in the intro to your article. It&amp;rsquo;s not going away. It&amp;rsquo;s getting better every day and still far ahead of the next best comparable tool, so when I say “die” here i more mean &amp;lsquo;fail to achieve the dream of what it could be&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Matt: Fair enough. You’re in a better position to judge that than me, to be honest. I just haven’t been super impressed by what I’ve seen, including some of the apps that were mentioned at one react conf. video I saw.&lt;/p&gt;

&lt;p&gt;Brent: Ya fair enough, lots of em aren’t great.&lt;/p&gt;

&lt;p&gt;Matt: I’ll look harder though and maybe I’ll come around to your point of view ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Build a React Native Login Form with Redux Pt1</title>
      <link>https://codecookbook.co/post/how-to-build-a-react-native-login-form-with-redux-pt1/</link>
      <pubDate>Mon, 12 Sep 2016 01:04:07 -0400</pubDate>
      
      <guid>https://codecookbook.co/post/how-to-build-a-react-native-login-form-with-redux-pt1/</guid>
      <description>

&lt;h2 id=&#34;introduction:287ac7e57179b39589a237849432314e&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Most mobile applications require that the user login to access some kind of functionality. This video shows you how to build a react native login form with Redux. Actually, that&amp;rsquo;s a lie. This is a video series and by the end of the series you&amp;rsquo;ll have this login form with redux but this first video is just kind of the very basics of getting going with redux to build a login form.&lt;/p&gt;

&lt;p&gt;Now, by the time the video series is over you&amp;rsquo;ll have this login form you can type in the username and password and click this button. When you click this button, you will see this activity indicator that kind of simulates the network request and then you&amp;rsquo;re brought right back here assuming the &amp;ldquo;network request&amp;rdquo; completes successfully. Also notice that i can change the orientation of the application and everything works fine. That&amp;rsquo;s kind of what the finished products that looks like.&lt;/p&gt;

&lt;h2 id=&#34;defining-state-1-05:287ac7e57179b39589a237849432314e&#34;&gt;Defining State (1:05)&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s get started. Here&amp;rsquo;s the app before anything works. You can see this button doesn&amp;rsquo;t do anything. So let&amp;rsquo;s let&amp;rsquo;s go ahead and look at what we have here.&lt;/p&gt;

&lt;p&gt;When we&amp;rsquo;re working with redux one of the most helpful things we can do in the beginning is just think about the state that represents our application and&lt;/p&gt;

&lt;p&gt;we&amp;rsquo;re going to go ahead and define this state in the constructor so for us we have the user name of the user is typing in the field and we also have password. Now, in this case since we have that little activity indicator spinning thing, we&amp;rsquo;re actually gonna need some UI state that tells us whether there is a currently pending login request so let&amp;rsquo;s go ahead and add a property to our state object called &amp;ldquo;pendingLogingRequest,&amp;rdquo; and this just kind of a first approximation of the state that we&amp;rsquo;re going to need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class LoginWithRedux extends Component {

  constructor(props) {
    super(props);
    this.state = {
      username: &#39;&#39;,
      password: &#39;&#39;,
      pendingLoginRequest: false
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-actions-2-12:287ac7e57179b39589a237849432314e&#34;&gt;Defining Actions (2:12)&lt;/h2&gt;

&lt;p&gt;The next thing that&amp;rsquo;s helpful to do when working with redux is to think about the actions that can actually change the state of our screen. There&amp;rsquo;s several actions in our case. There&amp;rsquo;s the action of the user typing in their username field. There&amp;rsquo;s another action of them typing in the password field. And there&amp;rsquo;s another action of actually clicking this this login button here, but we&amp;rsquo;re only actually going to write down just one of these actions just that we can kind of get started with using redux here.&lt;/p&gt;

&lt;p&gt;The action that I want to be interested in is the type username action so I&amp;rsquo;m going to create that action and then i&amp;rsquo;m going to go ahead and create the action creator for that action and we&amp;rsquo;ll call that &lt;code&gt;typeUsername&lt;/code&gt; and this action Creator is going to take the text that the user is typing and return an action that represents the user typing. This action is going to have a type property, which is simply the action type we&amp;rsquo;ve just defined. It is also going to have a text property which is the text of the users typing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const TYPE_USERNAME = &#39;TYPE_USERNAME&#39;;
const typeUsername = (text) =&amp;gt; ({
  type: TYPE_USERNAME,
  text
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-store-3-29:287ac7e57179b39589a237849432314e&#34;&gt;The Store (3:29)&lt;/h2&gt;

&lt;p&gt;So we have our state and we have our action. The next thing that we need is our reducer and the reducer is something that&amp;rsquo;s actually passed into redux&amp;rsquo;s &lt;code&gt;createStore&lt;/code&gt; function so let&amp;rsquo;s go ahead and grab redux. We&amp;rsquo;re also going to need to grab the react bindings for redux.&lt;/p&gt;

&lt;p&gt;Now that we have this installed we can go ahead and import the &lt;code&gt;createStore&lt;/code&gt; function from redux and so let&amp;rsquo;s start with that. We&amp;rsquo;re gonna go ahead and create our store in this component constructor, and we&amp;rsquo;re going to pass in a reducer and our initial state. The reducer takes the previous state and the action that&amp;rsquo;s been dispatched and so when the user types in to this field here, what we want to do is we want to basically return new state that just incorporates the text that they&amp;rsquo;ve typed in here so let&amp;rsquo;s do that and we&amp;rsquo;re not going to worry about any other actions right now. We&amp;rsquo;re just going to return a new object that spreads over state and changes the username property to the text that the user is typing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.store = createStore((state, action) =&amp;gt; {      
  return {...state, username: action.text}
}, this.state);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-a-container-component-5-09:287ac7e57179b39589a237849432314e&#34;&gt;Defining a Container Component (5:09)&lt;/h2&gt;

&lt;p&gt;Now in order to actually make sure that our redux and our actions are working properly we need to wire this up to our react application. The way that we do that is with the react redux bindings. So, we&amp;rsquo;re going to need the &lt;code&gt;connect&lt;/code&gt; function and we&amp;rsquo;re also going to need the component called a &amp;ldquo;Provider,&amp;rdquo; and I&amp;rsquo;ll explain what these are in just a moment.&lt;/p&gt;

&lt;p&gt;So this connect function returns a function that when given a react component will return a container component. Now, container components are actually intermediaries between primitive react native components and your redux store.&lt;/p&gt;

&lt;p&gt;They do two things. One they take new state updates from the redux store and they map that state to the properties of a contained component and in this case, the contained component that we&amp;rsquo;re interested in is a &lt;code&gt;TextInput&lt;/code&gt;. We want this to be contained in a container component, so that it&amp;rsquo;s smart about basically updates that are coming from the Redux store.&lt;/p&gt;

&lt;p&gt;In order for this container component to act as an intermediary and we need to give it a function. Let&amp;rsquo;s actually give a name for this container component. We&amp;rsquo;ll call it &lt;code&gt;LoginFormTextInput&lt;/code&gt; and the first parameter of the connect function is actually a function that maps from the state object that we define down here to the properties on the contained component that we want to update as a result of changes in the state.&lt;/p&gt;

&lt;p&gt;So, this function takes a state and it returns an object that&amp;rsquo;s used to set the properties on the contained &lt;code&gt;TextInput&lt;/code&gt;. So what we want this to return is this value property here on this object and this value is going to be set to value prop on the &lt;code&gt;TextInput&lt;/code&gt; that&amp;rsquo;s contained inside of this &lt;code&gt;LoginFormTextInput&lt;/code&gt; container component.&lt;/p&gt;

&lt;p&gt;The next thing that we need this is the second parameter of the &lt;code&gt;connect&lt;/code&gt; function is a
function that maps from the event props on the contained component to a function that will dispatch our actions that were interested in. In this case we&amp;rsquo;re interested in the &lt;code&gt;onChangeText&lt;/code&gt; event prop on the text input component.&lt;/p&gt;

&lt;p&gt;What we want to do is we want to take the text that&amp;rsquo;s being changed and we want to use that text to dispatch the type username action using this action creator that we just created a few minutes ago.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const LoginFormTextInput = connect((state) =&amp;gt; ({
  value: state.username
}), (dispatch) =&amp;gt; ({
  onChangeText: (text) =&amp;gt; {
    dispatch(typeUsername(text));
  }
}))(TextInput);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;providing-the-store-to-our-container-component-8-43:287ac7e57179b39589a237849432314e&#34;&gt;Providing the Store to our Container Component (8:43)&lt;/h2&gt;

&lt;p&gt;Now, what we have is this container component that&amp;rsquo;s wired up with our index store and the way that we expose this to work to this container is by using the &lt;code&gt;Provider&lt;/code&gt; component that we imported from the react redux bindings.&lt;/p&gt;

&lt;p&gt;This provider component exposes the store to all of its children and so we&amp;rsquo;ll go ahead and give it the store that we&amp;rsquo;ve created in constructor as a prop. Next, we can actually replace this &lt;code&gt;TextInput&lt;/code&gt; with a &lt;code&gt;LoginFormTextInput&lt;/code&gt; and let&amp;rsquo;s see what happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Provider store={this.store}&amp;gt;
  &amp;lt;View style={styles.container}&amp;gt;
  &amp;lt;LoginFormTextInput style={styles.textInput} placeholder=&amp;quot;Username&amp;quot;/&amp;gt;
  &amp;lt;TextInput style={styles.textInput} placeholder=&amp;quot;Password&amp;quot;/&amp;gt;
  &amp;lt;TouchableHighlight style={{padding: 15, backgroundColor: &#39;#fed136&#39;}}&amp;gt;
    &amp;lt;Text style={styles.welcome}&amp;gt;
      Get Cookin&#39;
    &amp;lt;/Text&amp;gt;
  &amp;lt;/TouchableHighlight&amp;gt;
  &amp;lt;/View&amp;gt;
&amp;lt;/Provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-that-it-works-9-40:287ac7e57179b39589a237849432314e&#34;&gt;Testing that it works (9:40)&lt;/h2&gt;

&lt;p&gt;When I type in here let&amp;rsquo;s actually make sure that the state is being updated properly. The easiest way to do that right now anyway is just to log ,it so let&amp;rsquo;s go ahead and let&amp;rsquo;s log our action.&lt;/p&gt;

&lt;p&gt;So we see that we&amp;rsquo;re actually getting actions dispatched to our reducer, and that these actions contain the right data.&lt;/p&gt;

&lt;p&gt;Som there you have it you have kind of the very basics of getting started with redux in your react native application. Check back soon for the next part in this video series that you can have the entire working login form in your app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Make Network Requests in React Native</title>
      <link>https://codecookbook.co/post/how-to-make-network-requests-in-react-native/</link>
      <pubDate>Sun, 11 Sep 2016 01:28:06 -0400</pubDate>
      
      <guid>https://codecookbook.co/post/how-to-make-network-requests-in-react-native/</guid>
      <description>

&lt;h2 id=&#34;introduction:fed7aec0e8d48d1d0c4a3342352ee821&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Most non-trivial mobile applications require that you make some network
requests. This video shows you how to do that, and it pays particular attention to how to do that on iOS devices, which can be kind of tricky because of something called &amp;ldquo;App Transport Security.&amp;rdquo; This video is brought to you by code cookbook your source for recipes for building great react native applications.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go ahead and get started. So you can see here we have an iOS app, and if we scroll down to the jsx, it&amp;rsquo;s rendering this view. We see that we have a touchable highlight, and what we want to do is make it so that when we click this this touchable highlight, we&amp;rsquo;re going to make a network request. So let&amp;rsquo;s go ahead and start doing that now, and we&amp;rsquo;re going to actually get our our data from the hacker news API. So the method that&amp;rsquo;s going to be invoked here when we want to make our network request is going to be called &amp;ldquo;fetch story.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s go ahead and bind that method in the constructor of this component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class NetworkInspector extends Component {

  constructor(props) {
    super(props);
    this._fetchStory = this._fetchStory.bind(this);
  }

  render() {
    return (
      &amp;lt;View style={styles.container}&amp;gt;
        &amp;lt;TouchableHighlight onPress={this._fetchStory}&amp;gt;
          &amp;lt;Text style={styles.welcome}&amp;gt;
            Code Cookbook
          &amp;lt;/Text&amp;gt;
        &amp;lt;/TouchableHighlight&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-fetch-function-1-27:fed7aec0e8d48d1d0c4a3342352ee821&#34;&gt;The Fetch function (1:27)&lt;/h2&gt;

&lt;p&gt;Now, react native has this global fetch function that we can use to to fetch data from the network so that&amp;rsquo;s what we&amp;rsquo;re going to use here and here&amp;rsquo;s our URL for the hacker news api call we wanna make.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class NetworkInspector extends Component {
  //...
  _fetchStory() {
    fetch(&#39;https://hacker-news.firebaseio.com/v0/item/8863.json?print=pretty&#39;);
  }
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-ats-network-error-and-the-network-inspector-1-46:fed7aec0e8d48d1d0c4a3342352ee821&#34;&gt;The ATS Network Error and the Network Inspector (1:46)&lt;/h2&gt;

&lt;p&gt;So, I&amp;rsquo;m going to have to refresh this and you can see down here that there&amp;rsquo;s actually an error that occurred when we tried to make our network requests, and the reason this happened is because of something called &amp;ldquo;App Transport Security.&amp;rdquo; (henceforth ATS) It&amp;rsquo;s a new requirement iOS 9 that requires all apps by default to use https for their network requests, and this can be problematic if we&amp;rsquo;re using an API that we don&amp;rsquo;t actually have control over whether that API is serving content via https or the particular certificate that&amp;rsquo;s being used and all that and so what I want to show you is how you can actually tweak the app transport security settings so that you can make network requests and kind of keep developing your application.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s let&amp;rsquo;s go ahead and do that now, and actually before I do that I want to show you something called the network inspector so I just pressed command D on my keyboard here and this opened up the developers menu and then i can click &amp;ldquo;show inspector.&amp;rdquo; There&amp;rsquo;s a network tab this, and this was actually just introduced in version .33. When i click this button I can see detailed information on the particular Network requests that i tried to make.&lt;/p&gt;

&lt;p&gt;You can see actually that the status and the timeout response we have are undefined and this is actually good evidence that your network request is failing because of ATS so let&amp;rsquo;s let&amp;rsquo;s go ahead and fix this now.&lt;/p&gt;

&lt;h2 id=&#34;fixing-network-request-failures-3-12:fed7aec0e8d48d1d0c4a3342352ee821&#34;&gt;Fixing Network Request Failures (3:12)&lt;/h2&gt;

&lt;p&gt;So I&amp;rsquo;m gonna go ahead and just open up the xcode project for our app. When we do we&amp;rsquo;re brought to the info.plist. That&amp;rsquo;s where you want to be, and there&amp;rsquo;s this key here called a &amp;ldquo;transport security settings&amp;rdquo; and then there&amp;rsquo;s an exception domains dictionary and we want to add a dictionary for the hacker views API so that we can kind of tweaked ATS&amp;rsquo;s settings for specifically the hacker news URL or domain so let&amp;rsquo;s go ahead and do that.&lt;/p&gt;

&lt;p&gt;So, the name of the dictionary will actually be the domain name and we&amp;rsquo;ll make this dictionary. You&amp;rsquo;ll notice here that there&amp;rsquo;s this localhost exception here and this is required because of the way that react native actually communicates with the iOS devices. Its kind of how they do hot reloading so there&amp;rsquo;s this key here where they they kind of tweaked ATSs settings.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to get into the details here, but I&amp;rsquo;m just going to copy that key so that it&amp;rsquo;s underneath this dictionary that I just created here. In this particular case I actually need to add another key to tweak ATS and this key has to do with forward secrecy and I don&amp;rsquo;t want that to be required in order for my network request to be successful, so I&amp;rsquo;m going to go ahead and set NO as the value there so with these two things in place i should be able to make a network request.&lt;/p&gt;

&lt;h2 id=&#34;testing-that-our-fix-worked-5-35:fed7aec0e8d48d1d0c4a3342352ee821&#34;&gt;Testing that our fix worked (5:35)&lt;/h2&gt;

&lt;p&gt;Now, because I&amp;rsquo;ve actually made this change in xcode, or, in other words, I made the change outside of JavaScript I&amp;rsquo;m actually going to need to recompile the application to make sure that these changes take effect, so let&amp;rsquo;s do that now. Let&amp;rsquo;s close xcode. Then I&amp;rsquo;m just going to run &lt;code&gt;run-ios&lt;/code&gt; from the react native command line. It looks like that&amp;rsquo;s done.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s go ahead and click and now we see that the network request has actually gone through, but actually here you can see that there&amp;rsquo;s a 404. There&amp;rsquo;s an error here, and the reason this actually happened is because we have a typo here. We&amp;rsquo;re missing an &amp;ldquo;n&amp;rdquo; in the URL. Once I have that there and refresh and tap this button and then look at things in the inspector, I can see that the status code is actually two hundred and I can actually see the payload that I&amp;rsquo;m getting as a result of making the network requests.&lt;/p&gt;

&lt;p&gt;So the network inspector is actually really handy for debugging what goes wrong with your network requests, and I definitely recommend it over logging or even putting in jsx-like text elements to kind of see what you&amp;rsquo;re getting back from the network.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s it. That&amp;rsquo;s how to make a basic network requests in react native. Again, this video is brought to you by code cookbook. Be sure to check back soon to see new recipes for building great react native applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Share Text from your React Native App</title>
      <link>https://codecookbook.co/post/how-to-share-text-from-your-react-native-app/</link>
      <pubDate>Fri, 09 Sep 2016 18:58:27 -0400</pubDate>
      
      <guid>https://codecookbook.co/post/how-to-share-text-from-your-react-native-app/</guid>
      <description>

&lt;h2 id=&#34;introduction:6e0d15726fad3e9897ecfbfbfa17ddbc&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Sometimes when you&amp;rsquo;re building a mobile application you want to be able to share data from the application to an external application like an email app or maybe Facebook Twitter.&lt;/p&gt;

&lt;p&gt;This recipe shows you how to do this this recipe is from code cookbook your source for short video recipes on how to build great react native applications. Let&amp;rsquo;s go ahead and get started.&lt;/p&gt;

&lt;p&gt;So, you can see here that we have a simple react native application. This is actually generated from the &lt;code&gt;init&lt;/code&gt; command from the reactive command-line interface, and all were doing here right now is showing this code cookbook text so let&amp;rsquo;s actually change this to a more appropriate text so we want to share.&lt;/p&gt;

&lt;h2 id=&#34;simple-sharing-1-00:6e0d15726fad3e9897ecfbfbfa17ddbc&#34;&gt;Simple Sharing (1:00)&lt;/h2&gt;

&lt;p&gt;Now, when we click this button, we actually want to be able to share something to the mail application, and so let&amp;rsquo;s go ahead and import &lt;code&gt;Share&lt;/code&gt; from react-native. We&amp;rsquo;re going to go ahead and add a method that will be called that will actually work with this share here from the reactive module so let&amp;rsquo;s let&amp;rsquo;s go ahead and do that now so we have this share message and we actually need to go ahead and define this in our component let&amp;rsquo;s do that. Now, we can go ahead and define method now so we have this share message method and like we said we want to actually do share some data when we invoke this method and so the API for for the share module is just this share method and then we can pass it an object with a message property that holds the information that we want to share.&lt;/p&gt;

&lt;p&gt;So, we can say &amp;ldquo;This is a simple shared message.&amp;rdquo; The share method actually returns promise, so we&amp;rsquo;re going to go ahead and pass a method that will handle the result of the promise and we&amp;rsquo;ll call this &amp;ldquo;showResult,&amp;rdquo; so we need to go ahead and create a method for that and this method will go ahead and set some state which we&amp;rsquo;ll &amp;ldquo;result&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We need to go ahead and initialize this state here in the constructor. And now we should have a really simple working share example. Let&amp;rsquo;s go ahead and add a simple text component here that will display a result of calling share. We&amp;rsquo;re going to go ahead and do just going to stringify the result.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go ahead and refresh this, and you see if we can get something working so i&amp;rsquo;m gonna go ahead and cancel here just to make sure that everything&amp;rsquo;s working, and you can see that the result promise created this action and it just tells us that we&amp;rsquo;ve kind of dismissed that the share action sheet that we didn&amp;rsquo;t actually do anything. However, if we click this again and we go to the mail application is up you&amp;rsquo;ll see that the mail the email here is populated with the content from this message property, so we know that that&amp;rsquo;s working properly and we can actually go ahead and send this.&lt;/p&gt;

&lt;p&gt;When it&amp;rsquo;s actually sent you can see that that the object that gets kind of resolved by the promises little different it has the action of shared action here and then it tells us the type of the activity that actually that we actually shared the message to. So, this is how we do kind of really simple sharing of data to external applications.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class ShareLesson extends Component {

  constructor(props) {
    super(props);
    this._shareMessage = this._shareMessage.bind(this);
    this._showResult = this._showResult.bind(this);
    this.state = { result: &#39;&#39;};
  }

  _showResult(result) {
    this.setState({result});
  }

  _shareMessage() {
    Share.share({
      message: &#39;This is a simple shared message&#39;
    }).then(this._showResult);
  }

  render() {
      return (
        &amp;lt;View style={styles.container}&amp;gt;
          &amp;lt;TouchableHighlight onPress={this._shareMessage}&amp;gt;
                  &amp;lt;Text style={styles.welcome}&amp;gt;
                    Share
                  &amp;lt;/Text&amp;gt;
          &amp;lt;/TouchableHighlight&amp;gt;
          &amp;lt;Text&amp;gt;
            {JSON.stringify(this.state.result)}
          &amp;lt;/Text&amp;gt;
        &amp;lt;View&amp;gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fancy-sharing-5-05:6e0d15726fad3e9897ecfbfbfa17ddbc&#34;&gt;Fancy Sharing (5:05)&lt;/h2&gt;

&lt;p&gt;However, you can actually get a little bit more fancy when we do this and so let&amp;rsquo;s let&amp;rsquo;s go ahead and show what that looks like. There are more options that we have when we&amp;rsquo;re sharing sharing data to other applications, and so let&amp;rsquo;s let&amp;rsquo;s explore those. So now we have this fancy share and we&amp;rsquo;re going to have a separate method. This one&amp;rsquo;s gonna be called &amp;ldquo;fancyShareMessage,&amp;rdquo; and we&amp;rsquo;re gonna have to go up here.&lt;/p&gt;

&lt;p&gt;So, now this time when we call share we&amp;rsquo;re actually going to pass in we&amp;rsquo;re actually going to pass in not only a message but also a URL. Again, this is a promise so we need to pass in a function that will be called when the promise gets resolved. Let&amp;rsquo;s go to refresh this and we open up the mail application this time, you&amp;rsquo;ll notice that there&amp;rsquo;s a message and a URL that populates the email. So, that&amp;rsquo;s that&amp;rsquo;s one way that we can get a little bit fancy here with our with our share.&lt;/p&gt;

&lt;p&gt;Now, if you look at the example in the UI explore react native there&amp;rsquo;s actually a title property that they they use in the example, but in my experience that doesn&amp;rsquo;t really seem to do anything it might just be that i&amp;rsquo;m not opening the right application to share data to.&lt;/p&gt;

&lt;p&gt;However, there is another parameter that this takes and these are options that customize the look of the dialogue action sheet that appears when you try and share something so. For example, I can specify a tint color property. When I refresh this and click fancy share you&amp;rsquo;ll notice that this cancel button here is green, so I said that the tint color here and I&amp;rsquo;ve kind of customize the appearance of this.&lt;/p&gt;

&lt;p&gt;Now again there&amp;rsquo;s another property that&amp;rsquo;s set here in the in the example application from the Explorer UI and that property is dialogue title, and again this doesn&amp;rsquo;t seem to matter much, so i don&amp;rsquo;t really worry about it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;_fancyShareMessage() {
  Share.share({
    // title: &#39;&#39;
    message: &#39;This is a fancy shared message&#39;,
    url: &#39;http://codecookbook.co&#39;
  }, {
    tintColor: &#39;green&#39;,
    // dialogTitle: &#39;This doesnt matter much&#39;
  }).then(this._showResult);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion-8-02:6e0d15726fad3e9897ecfbfbfa17ddbc&#34;&gt;Conclusion (8:02)&lt;/h2&gt;

&lt;p&gt;So now you&amp;rsquo;ve just seen how you can share data external to react native application. You&amp;rsquo;ve seen kind of a basic share case and a share case that has a little bit more options.&lt;/p&gt;

&lt;p&gt;Well that&amp;rsquo;s it i hope you enjoyed this recipe from the cookbook be sure to check back soon for a new recipe.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cooking with rxjs</title>
      <link>https://codecookbook.co/post/cooking-with-rxjs/</link>
      <pubDate>Thu, 08 Sep 2016 23:22:11 -0400</pubDate>
      
      <guid>https://codecookbook.co/post/cooking-with-rxjs/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>