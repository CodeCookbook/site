<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Texts on Code Cookbook</title>
    <link>https://codecookbook.co/text/</link>
    <description>Recent content in Texts on Code Cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2016 11:28:44 -0400</lastBuildDate>
    <atom:link href="https://codecookbook.co/text/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I&#39;m a React Native Developer: a Response to Ariel Elkin</title>
      <link>https://codecookbook.co/text/why-im-a-react-native-developer/</link>
      <pubDate>Sat, 01 Oct 2016 11:28:44 -0400</pubDate>
      
      <guid>https://codecookbook.co/text/why-im-a-react-native-developer/</guid>
      <description>

&lt;p&gt;Most of my experience is in native Android and iOS mobile development. Although I&amp;rsquo;ve typically been skeptical of cross-platform development tools for mobile, I think that react native is really neat. In fact, I&amp;rsquo;m willing to bet that its the future of mobile development.&lt;/p&gt;

&lt;p&gt;I disagree with Ariel Elkin, who recently wrote &lt;a href=&#34;https://arielelkin.github.io/articles/why-im-not-a-react-native-developer.html&#34;&gt;an excellent article&lt;/a&gt; in which he explains why he thinks using react native is a bad idea. While several good points were made, I think that ultimately the argument he puts forth is lacking. In this article, I try to say where I think Ariel goes wrong in his arguments against react native.&lt;/p&gt;

&lt;h1 id=&#34;react-native-s-licensing-isn-t-scary:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;React Native&amp;rsquo;s licensing isn&amp;rsquo;t Scary&lt;/h1&gt;

&lt;p&gt;In the section (cleverly) titled &amp;ldquo;Patently Daunting,&amp;rdquo; Ariel argues that by using React Native,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;I’m jeopardising&amp;hellip;both the platform my app depends on as well as my intellectual property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He then says that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iOS apps enter the App Store entirely at Apple’s discretion. I don’t want to multiply that uneasy feeling by two.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s &lt;a href=&#34;https://news.ycombinator.com/item?id=12597488&#34;&gt;a comment on HN&lt;/a&gt; that pretty well addresses this concern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;if you&amp;rsquo;re not using React you&amp;rsquo;re probably already using open source software. And in the JS ecosystem that probably means you&amp;rsquo;re using software under MIT, BSD and ISC licenses [licensed used by projects like jQuery, Angular, and Ember], which have no patent provisions whatsoever.&lt;/p&gt;

&lt;p&gt;In other words: unless you have an explicit patent grant, you&amp;rsquo;re at risk of being sued by the owners of whatever patents you happen to be infringing upon. The only difference is that you&amp;rsquo;re entirely reliant upon the goodwill of the patent owners while React explicitly shields you unless you sue Facebook over patents.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Organizations that use any of these open source packages do so because they believe that the advantages of using these packages outweigh the risk of getting sued for patent infringement. This seems like a reasonable assessment in general and, as we&amp;rsquo;ll see in the next sections, I think its a reasonable assessment for react native in particular.&lt;/p&gt;

&lt;h1 id=&#34;its-not-javascript-its-just-good-business:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;Its not Javascript, its just good business&lt;/h1&gt;

&lt;p&gt;After pointing out some of the legal concerns with using React Native, Ariel launches into a long list of Javascript&amp;rsquo;s flaws. The list is meant to convey that &amp;ldquo;switching to React Native from Swift is the technical regress: you have to adopt and use JavaScript, a language that’s technically defective, unsafe, and slowly evolving.&amp;rdquo; Ariel then suggests that Flow isn&amp;rsquo;t a solution to Javascript&amp;rsquo;s problems because Flow doesn&amp;rsquo;t ultimately address JavaScript&amp;rsquo;s &amp;ldquo;insecure foundations.&amp;rdquo; I think neither of these arguments are particularly compelling. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;h2 id=&#34;the-business-benefits-of-rn-probably-outweigh-javascript-s-defects:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;The Business benefits of RN probably outweigh Javascript&amp;rsquo;s defects&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t like javascript. I think that many of the criticisms Ariel lodges against javascript are spot on. For better or worse, however, we have to think about javascript from the perspective of the people who are paying our salaries. If we think about javascript from their perspective, I think we&amp;rsquo;ll see that the benefits of RN outweigh javascript&amp;rsquo;s flaws.&lt;/p&gt;

&lt;p&gt;Mobile developers have been a special snowflake in many companies hiring and development processes. We have our own skills with our own tools and our own languages. This costs businesses a lot of money. The ability for businesses to say, &amp;ldquo;Our web developers can now develop mobile applications&amp;rdquo; is a huge win.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Mobile developers have been writing almost exactly the same code for two different platforms for almost 8 years now. Businesses simply do not want to keep paying us to write the same code twice, especially now that the mobile app market is becoming saturated.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This is what our employers are thinking:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;You mean I can share up to 85% percent of my code across both platforms&lt;sup&gt;3&lt;/sup&gt; and I can have my web developers contribute to mobile apps and all I have to do is use an inferior programming language? Sign me up!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The relevant question here isn&amp;rsquo;t &amp;ldquo;Is javascript inferior to Swift?&amp;rdquo; Rather, the question is: &amp;ldquo;Is Swift so much better than javascript that it will save me the money I could save from sharing 85% percent of my code across platforms and sharing my web team with my mobile team?&amp;rdquo; The answer to this later, more relevant question is almost certainly &amp;ldquo;no.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;flow-isn-t-like-flossing:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;Flow isn&amp;rsquo;t like Flossing&lt;/h2&gt;

&lt;p&gt;Later on in the Javascript section, Ariel argues that Flow, Facebook&amp;rsquo;s static type-checker, doesn&amp;rsquo;t solve javascript&amp;rsquo;s problems. Again, some of the points here are good, but ultimately, they are inadequate as an argument against React Native.&lt;/p&gt;

&lt;p&gt;The first argument against flow has something to do with it being built on &amp;ldquo;weak foundations:&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Impressive as an engineering effort Flow may be, it remains a superset of JavaScript and thus forces you to build on inherently weak foundations&amp;hellip;The fact that things can be built on unsafe foundations does not make the foundations any safer, nor does it make the process any more efficient.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everything Ariel says is correct in this passage. Javascript is a weak foundation, flow is built on a weak foundation, and flow doesn&amp;rsquo;t make the &amp;ldquo;the foundations any safer&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing: all programming languages are built on an unsafe, unproductive foundation: binary. This fact doesn&amp;rsquo;t bother us because the abstractions and tools we&amp;rsquo;ve built on top of binary and assembly are good enough to allow us to be very productive.&lt;/p&gt;

&lt;p&gt;We can say the same thing about javascript. If we build abstractions and tools that allow us to be productive, then the foundation doesn&amp;rsquo;t matter. Regarding Ariel&amp;rsquo;s claim that the tools built on top of javascript haven&amp;rsquo;t actually made developers more effective, Facebook, Google, Microsoft, and many other companies using flow and typescript seem to disagree.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a second argument that Ariel offers against the usefulness of flow that&amp;rsquo;s pretty interesting:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is another fundamental problem with these palliative measures [like flow and linters]. Safeguards, like laws, are worth very little if they’re not actually enforced by the authorities and respected by the community. Flow doesn’t stop you from building and running React Native apps with code bound to generate runtime crashes. And that is a basic safety requirement for a programming language: if it’s a preventable error, the language should actively prevent it, it should stop me from writing and running unsafe code by default, not as an afterthought.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A part of this seems right to me. All other things being equal, a language is better if by default it catches errors earlier on in the development cycle.&lt;/p&gt;

&lt;p&gt;I do, however, think that its wrong to suggest that the tools and languages that are built on top of js are worth little unless the entire community uses those tools. A single team can get a lot from enforcing the usage of these tools, and it doesn&amp;rsquo;t take much work to fail your builds if your javascript is missing type annotations.&lt;/p&gt;

&lt;p&gt;Over time, I think more and more teams will see the value in these tools and we&amp;rsquo;ll get the benefit of having our dependencies leveraging these javascript-enhancing tools.&lt;/p&gt;

&lt;h1 id=&#34;for-better-or-worse-react-native-is-a-good-bet:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;For better or worse, React Native is a good bet&lt;/h1&gt;

&lt;p&gt;None of this, by the way, is meant to suggest that building on top of javascript is &lt;em&gt;ideal&lt;/em&gt;. If I had my way, I&amp;rsquo;d prefer Ariel&amp;rsquo;s solution: replace javascript. However, if we&amp;rsquo;re trying to make good decisions about which tech to invest in as developers, we have to think about this issue from the perspective of the people who are paying our salaries and these people have &lt;em&gt;a lot&lt;/em&gt; invested in javascript.&lt;/p&gt;

&lt;p&gt;I believe in react native so much, in fact, that I&amp;rsquo;m betting my business on it. Code Cookbook is a company that helps teams start using react native for their business. Sign up for our email list below for updates and online tutorials on react native or email me at &lt;strong&gt;chefmatt[that symbol that comes between a handle and a domain]codecookbook.co&lt;/strong&gt; so we can chat about how I can help.&lt;/p&gt;

&lt;p&gt;p.s. As you can tell from the obnoxious way I just published my email, I hate spam, so I won&amp;rsquo;t be spamming your inbox either.&lt;/p&gt;

&lt;h2 id=&#34;notes:9e4a17eb27471af55cd3e5fd91ba46e7&#34;&gt;Notes:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I&amp;rsquo;m not saying here that native mobile development expertise isn&amp;rsquo;t (at this point) necessary for being an effective react native mobile developer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For evidence of the saturation of the app market, take a look at slides 11 and 12 of &lt;a href=&#34;http://www.kpcb.com/internet-trends&#34;&gt;this past year&amp;rsquo;s internet trends report&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://makeitopen.com/tutorials/building-the-f8-app/planning/&#34;&gt;Facebook was able to achieve 85% code reused for their conference app.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Updates to rnpm for 0.34</title>
      <link>https://codecookbook.co/text/updates-to-rnpm-for-0.34/</link>
      <pubDate>Tue, 20 Sep 2016 15:21:04 -0400</pubDate>
      
      <guid>https://codecookbook.co/text/updates-to-rnpm-for-0.34/</guid>
      <description>

&lt;h2 id=&#34;better-logging:c1c78318aafe625d00531d59f01e8755&#34;&gt;Better Logging&lt;/h2&gt;

&lt;p&gt;Sometimes someone adds a library but does not link it. Before React Native 0.34, if you wanted to identify a library that required linking, you would type &lt;code&gt;react-native link&lt;/code&gt;. You would then be presented with a bunch of text that looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/997157/17838588/84223264-6796-11e6-81d2-075d30942a69.png&#34; alt=&#34;Wall of text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a bummer because you had to read a wall of text just to see if rnpm handled the issue.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/GantLaborde?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&#34;&gt;Gant Laborde&lt;/a&gt;, this release speeds up this process by adding a logging level that only logs for previously linked libraries. Now, if you&amp;rsquo;re in this situation, you can identify libraries that haven&amp;rsquo;t been linked &amp;ldquo;at a glance.&amp;rdquo; It looks a little like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/997157/17838613/22568c8c-6797-11e6-8e12-c73746ec0eff.png&#34; alt=&#34;Identify unlinked libs at a glance&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;pre-and-post-unlink:c1c78318aafe625d00531d59f01e8755&#34;&gt;Pre and Post Unlink&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;prelink&lt;/code&gt; and &lt;code&gt;postlink&lt;/code&gt;, in case you didn&amp;rsquo;t know, are &lt;a href=&#34;https://github.com/rnpm/rnpm#commands&#34;&gt;rnpm commands&lt;/a&gt; that are used to customize a plugin&amp;rsquo;s setup based on a user&amp;rsquo;s input. They are added to a plugin&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;quot;rnpm&amp;quot;: {
  &amp;quot;commands&amp;quot;: {
    &amp;quot;prelink&amp;quot;: &amp;quot;./bin/requestGAToken&amp;quot;,
    &amp;quot;postlink&amp;quot;: &amp;quot;./bin/linkingSucceeded&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before 0.34, there wasn&amp;rsquo;t corresponding &lt;code&gt;preunlink&lt;/code&gt; and &lt;code&gt;postunlink&lt;/code&gt; commands that could reverse any customizations that were made during the linking phase. Thanks to &lt;a href=&#34;https://twitter.com/geoffreygoh90&#34;&gt;Geoff Goe&lt;/a&gt;, we now have these additional commands to round out our link hook toolset.&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href=&#34;https://codecookbook.co/categories/rnupdates/&#34;&gt;our upcoming posts&lt;/a&gt; on the improvements for React Native version 0.34. If you want those posts delivered to your inbox, sign up on our email list below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How React Native Dies</title>
      <link>https://codecookbook.co/text/how-react-native-dies/</link>
      <pubDate>Wed, 14 Sep 2016 16:31:20 -0400</pubDate>
      
      <guid>https://codecookbook.co/text/how-react-native-dies/</guid>
      <description>

&lt;h2 id=&#34;by-chef-matt-code-cookbook-http-codecookbook-co:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;by Chef Matt @ &lt;a href=&#34;http://codecookbook.co&#34;&gt;Code Cookbook&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;update-i-ve-had-a-conversation-with-brent-vatne-that-s-led-me-to-slightly-revise-the-position-i-articulate-here-pieces-of-that-conversation-are-included-at-the-end-of-this-article:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Update: I&amp;rsquo;ve had a conversation with Brent Vatne that&amp;rsquo;s led me to slightly revise the position I articulate here. Pieces of that conversation are included at the end of this article.&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Recruiter: &amp;ldquo;Why don&amp;rsquo;t you want to work at a company that uses Cordova?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Me: &amp;ldquo;Look at the top 100 apps in the app store. None of those apps use Cordova. I want to build the best possible apps I can, so I don&amp;rsquo;t use Cordova, nor am I interested in learning how to build Cordova applications.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the above (actual) conversation suggests, I&amp;rsquo;ve typically been skeptical of any kind of mobile development that doesn&amp;rsquo;t use the Android and iOS SDKs. I was skeptical of React Native too until I tried it. Now, I honestly believe that React Native &lt;em&gt;can&lt;/em&gt; be a viable contender to standard mobile application development. This is exciting. Writing nearly identical code for both platforms is a huge waste of time, so the &amp;ldquo;learn once. write everywhere&amp;rdquo; value proposition is pretty compelling.&lt;/p&gt;

&lt;p&gt;I really want react native to succeed, but there&amp;rsquo;s a lot of hype around react native right now, and this hype can blind us to potentially deadly problems that react native faces as a technology. &lt;a href=&#34;https://hbr.org/2007/09/performing-a-project-premortem&#34;&gt;Pre-mortems&lt;/a&gt; are thought experiments designed to help us look past a project&amp;rsquo;s hype and think carefully about what needs to change about a product so that it can be successful in the long run. This article is a pre-mortem on React Native. It&amp;rsquo;s an invitation to imagine how react native dies so that we can make sure that it lives in the long run. I don&amp;rsquo;t think anyone wants to to writing nearly identical code on both platforms, so we all have some work to do to make sure that React Native makes it.&lt;/p&gt;

&lt;h3 id=&#34;react-native-the-adoption-lifecycle-and-the-chasm:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;React Native, the Adoption Lifecycle, and &amp;ldquo;the Chasm&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://codecookbook.co/img/adoption-lifecycle.png&#34; alt=&#34;Adoption lifecycle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Technology_adoption_life_cycle&#34;&gt;The adoption lifecycle&lt;/a&gt;,&amp;rdquo; as the name implies, divides a product&amp;rsquo;s adopters into different categories based on when they&amp;rsquo;ll adopt a product. Right now, I&amp;rsquo;d say that react native is being adopted by some &amp;ldquo;early adopters&amp;rdquo; like &lt;a href=&#34;https://medium.com/@clayallsopp/react-native-in-production-2b3c6e6078ad#.bh69dkdlp&#34;&gt;Palantir&lt;/a&gt;, &lt;a href=&#34;https://developers.soundcloud.com/blog/react-native-at-soundcloud&#34;&gt;Sound Cloud&lt;/a&gt;, &lt;a href=&#34;http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy&#34;&gt;Artsy&lt;/a&gt;, and &lt;a href=&#34;https://chalkchisel.com/blog/ios-developer-react-native&#34;&gt;Chalk and Chisel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Crossing_the_Chasm&#34;&gt;Geoffrey Moore famously suggested&lt;/a&gt; that its &lt;em&gt;more difficult&lt;/em&gt; for a product to capture the &lt;em&gt;early majority&lt;/em&gt; than it is to capture &lt;em&gt;early adopters&lt;/em&gt;. Moreover, he claims that the many products and companies dies as a result of failing to &amp;ldquo;cross the chasm&amp;rdquo; between early adopters and the early majority.&lt;/p&gt;

&lt;p&gt;Interestingly, he claims via a &amp;ldquo;High-Tech Parable&amp;rdquo; that a product is often at the edge of the chasm just when hype about a new product is at its greatest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;the company wins over several more visionary early adopters, including a handful of truly major deals&amp;hellip;everyone is convinced it is time to ramp up&amp;hellip;[one year later]&amp;hellip;third quarter revenue results are in - and they&amp;rsquo;re absolutely dismal&amp;hellip;What the company staff interpreted as a ramp in sales leading smoothly &amp;ldquo;up the [adoption lifecycle] curve&amp;rdquo; was in fact an initial blip&amp;hellip;and not the first indications of an emerging mainstream market.&lt;/p&gt;

&lt;p&gt;Crossing the Chasm, 23-24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that react native is actually close to the edge of the chasm, so the path forward for React Native, if we want to take Geoffrey Moore&amp;rsquo;s model seriously, is to find a way to win over the early majority.&lt;/p&gt;

&lt;h3 id=&#34;helping-react-native-cross-the-chasm:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Helping React Native Cross the Chasm&lt;/h3&gt;

&lt;p&gt;Who exactly is the early majority? Well, they are companies whose developers are more skeptical versions of me. These companies are full of native mobile developers who have invested a ton of time and energy learning the iOS and Android SDKs. These developers have seen Cordova come and go and they&amp;rsquo;re skeptical that anything other than the iOS and Android SDKs can deliver a truly native &lt;em&gt;look and feel.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If this is true, then we can identify one thing that could kill react native: a user experience that doesn&amp;rsquo;t &lt;em&gt;look and feel&lt;/em&gt; like ordinary Android and iOS apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This may seem obvious. After all, the whole point of react native is to let us build apps that feel like native apps without duplicating code across platforms. But hear me out. I think that many &lt;em&gt;react native developers are failing at this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Although react native is capable of delivering a native look and feel, I think many react native developers fail to take &lt;em&gt;full&lt;/em&gt; advantage of this. Many react native applications that I look at still look like web applications. These applications don&amp;rsquo;t exhibit any real concern for following the &lt;em&gt;UI design guidelines for the various platforms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think that if react native dies, it&amp;rsquo;ll be because it doesn&amp;rsquo;t figure out how to make it easy for its community to build apps that fall in line with the Android and iOS UI and UX design specs. Maybe the folks at Facebook don&amp;rsquo;t even necessarily need to change anything about react native for this to happen. Maybe we, as developers, just need to decide to do better with this.&lt;/p&gt;

&lt;p&gt;As more native developers come on board, the job of convincing the others will be easier. This isn&amp;rsquo;t just because people like to hop on band wagons. As &lt;a href=&#34;http://artsy.github.io/blog/2016/08/15/React-Native-at-Artsy/&#34;&gt;Eloy from Artsy&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=2Zthnq-hIXA&#34;&gt;James from Exponent&lt;/a&gt; have pointed out, native developers have insight on how to build better react native applications and when the skeptical native developers start seeing more quality react native apps, they&amp;rsquo;ll eventually be won over.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you agree, then the next time you start a react native app, checkout the &lt;a href=&#34;https://material.google.com/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/&#34;&gt;iOS&lt;/a&gt; design guidelines and tell you friends to do the same. If you think I&amp;rsquo;m wrong, then I&amp;rsquo;d love to hear what you think is the most threatening problem that react native faces on its way to mainstream adoption.&lt;/p&gt;

&lt;p&gt;Either way, let&amp;rsquo;s do what we can to make sure that we don&amp;rsquo;t have to go back to writing the same code on two different platforms.&lt;/p&gt;

&lt;p&gt;Code Cookbook creates recipes for building great react native apps. We have native mobile development experience, so we&amp;rsquo;ve got a little insight into how to build your react native apps so that they feel like native iOS and Android apps. You can check out our upcoming recipes on this topic &lt;a href=&#34;http://codecookbook.co/categories/rn-ux&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;appendix-talking-with-brent:deace3791fa6c92da778bfa1c5dd04ee&#34;&gt;Appendix: Talking with Brent&lt;/h3&gt;

&lt;p&gt;Brent: I think your conclusion is half on target and half off fwiw. [At one point you say,]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although react native is capable of delivering a native look and feel, I think many react native developers fail to take full advantage of this. Many react native applications that I look at still look like web applications. These applications don’t exhibit any real concern for following the UI design guidelines for the various platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I definitely agree that many developers don’t take advantage of it but i’m not convinced that the most poorly built apps using a tool will lead to it not succeeding. [At another point you say,]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think that if react native dies, it’ll be because it doesn’t figure out how to make it easy for its community to take build apps to the Android and iOS design specs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, I’m not sure this matters because hardly anyone properly follows this on ios and Android anyways. The only apps i have on my phone with material design properly done are from google :P&lt;/p&gt;

&lt;p&gt;Matt: Haha. Good point. So what do you think is the most pressing problem RN faces?&lt;/p&gt;

&lt;p&gt;Brent: From my point of view, some equivalent of uicollectionview/uitableview and android listview are a big concern still…[and] contact lists are difficult with react native, but super easy with native. Of course people can always drop down to native and bridge some view, which is what people do. But the biggest problems faced by react native are: a) startup time - it should be just as fast to render a part of your app with react native as it would be without - and b) listviews, very complex gestures. I group these together because they’re big problems that are both related to react-native async architecture that is in many ways incredible but makes these things more difficult see this talk re: gestures.&lt;/p&gt;

&lt;p&gt;Brent: Imo it’s not important to follow some narrowly defined designed language like material design. The web works great on desktop without any well defined language, but there are common patterns that work and people use those and everyone is happy. Also, I think being completely adherent with a platform specific design language hurts code reuse. Apps like f8 and many other RN apps have different navigation layouts but the actual content views are usually shared.&lt;/p&gt;

&lt;p&gt;Matt: I think you’re probably right that its not important to follow a narrowly designed language like material design. I’m actually not really committed to the importance of following a design language. I think it would have been better if [in the above article] I said something like: RN lets us create native experiences that feel just as good as regular native apps. A lot of devs aren’t taking advantage of this and that hurts RN. The design guidelines are a good starting point for understanding the potential for your RN app. Does that seem more plausible to you?&lt;/p&gt;

&lt;p&gt;Brent: Imo the basic premise of the article is awesome – you should think about how something might fail and that can help to prevent it. I’m not convinced that developers doing a bad job with their apps is hurting RN, because there are plenty doing great apps. Moreover, when I talk about react native dying, its purely as a thought exercise as you mentioned in the intro to your article. It&amp;rsquo;s not going away. It&amp;rsquo;s getting better every day and still far ahead of the next best comparable tool, so when I say “die” here i more mean &amp;lsquo;fail to achieve the dream of what it could be&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Matt: Fair enough. You’re in a better position to judge that than me, to be honest. I just haven’t been super impressed by what I’ve seen, including some of the apps that were mentioned at one react conf. video I saw.&lt;/p&gt;

&lt;p&gt;Brent: Ya fair enough, lots of em aren’t great.&lt;/p&gt;

&lt;p&gt;Matt: I’ll look harder though and maybe I’ll come around to your point of view ;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>